#usr/bin/python3
import sqlite3 as sql
import time
import threading
import tkinter
import GUI_Classes
from tkinter import *
#setup for window and frame for the fixed size
root=tkinter.Tk()

root.wm_attributes("-fullscreen", True)
window=tkinter.Frame(root, width=320, height=240)
window.grid_columnconfigure([0,1], minsize=160,weight=1)
window.grid_rowconfigure([0,1,2], minsize=80,weight=1)
window.grid_propagate(False)
window.grid(sticky=S+W+N+E)
MainGUI=GUI_Classes.GUI(root)
MenuGUI=GUI_Classes.GUI(root)
#main Button

CounterButton=GUI_Classes.Main_Button(window, font=("Helvetica",40),command=lambda:GUI_Classes.SwitchGUI(root, MainGUI, MenuGUI, 10, True,[lambda:GUI_Classes.newalarm(NextAlarm)]))
#menu Buttons and labels
AlarmNow=tkinter.Button(window, text="Alarm ausloesen", background="red")   
AlarmPlusAnHour=tkinter.Button(window,text="Alarm 1 Stunde verschieben",command=lambda: AlarmplusHours(1))    
Alarmplus1day=tkinter.Button(window,text="Alarm 1 Tag verschieben",command=lambda: AlarmplusHours(24))
NextAlarm=tkinter.Label(window)   
#connects to the main DB
conn=sql.connect("../coredata.db")
c=conn.cursor()


MainGUI.add_Element(CounterButton, 0, 0, 3, 2)
MenuGUI.add_Element(AlarmNow, 0,1,0,0)
MenuGUI.add_Element(AlarmPlusAnHour, 1,1,0,0)
MenuGUI.add_Element(Alarmplus1day, 2,1,0,0)
#MenuGUI.add_Element(NextAlarm,0,0,3,1)
def Alarmconfirmed(MainButton):

    

    x=time.mktime(time.localtime())

    y=[x,x]

    c.execute('update alarms set approved=? where timer<? and approved is null',y)

    conn.commit()

    MainButton.config(command=lambda:GUI_Classes.SwitchGUI(root, MainGUI, MenuGUI, 10, True,[lambda:GUI_Classes.newalarm(NextAlarm)]))

    MainButton.config(background="white")

def AlarmplusHours(Hours):
    #command for the 
    c.execute('select timer from alarms where approved is null order by timer asc')

    alarms=c.fetchall()

    for i in alarms:

        seconds=Hours*3600

        x=i[0]

        y=x+seconds

        q=[y,x]

        c.execute('update alarms set timer=? where timer=?',q)

        conn.commit()



def counter_Button(Button):
        #displays the next ALarm and the time remaining
        c.execute('select timer from alarms where approved is null order by timer asc' )

        x=c.fetchall()[0][0]

        q=list(time.localtime(x))

        gg=str(q[3])+":"+str(q[4])

        def refresh():
            #refreshes the button every second
            
            y=time.mktime(time.localtime())

            z=time.gmtime(x-y)

            Button.config(text=gg+"\n"+str(z[3])+":"+str(z[4])+":"+str(z[5]))

            Button.after(1000, refresh)

            

        refresh()
        Button.mainloop()
#sets up the main Button

MainGUI.grid_all_Elements()

CounterButton.counter_Button()
root.mainloop()
def alarm(window, MainButton):

    MainButton.config(background="green", command=Alarmconfirmed(MainButton))
    window.mainloop()    

def check_for_alarm():

    c.execute('select timer from alarms where approved is null order by timer asc')

    x=c.fetchall()

    c.execute('select timebefore from standard_alarms join alarms on (alarmoftheday=standard_alarms.Id)')

    y=c.fetchone()[0]
    

    if x[0][0]-y<time.mktime(time.localtime()):

        alarm()

def mainloop():

    while True:

        check_for_alarm()

        c.execute('select loop_duration from standard_settings')

        time.sleep(c.fetchone()[0])

mainloop()
